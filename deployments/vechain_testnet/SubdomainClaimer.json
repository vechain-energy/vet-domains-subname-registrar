{
  "address": "0x79b0377Dc32B1efd4C1B12aEFf9Ffc9D73291DDf",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ENS",
          "name": "ensAddr",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_domainName",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "contract PublicResolver",
          "name": "resolver",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "domainName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ens",
      "outputs": [
        {
          "internalType": "contract ENS",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "node",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf92cf0c363358bc440f379e8a4ea5e3ca3d5b0ca5046d5f31ed51dd49f2dfa48",
  "receipt": {
    "to": null,
    "from": "0x37CCe5C8BD6141Cbe8172B277FaA65AF5cc83C6a",
    "contractAddress": "0x79b0377Dc32B1efd4C1B12aEFf9Ffc9D73291DDf",
    "transactionIndex": 0,
    "gasUsed": "1034693",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x0133b2851ae133397d20b073e35bbbc6039a7b7359cefc93d5ac9edb6afd86c5",
    "transactionHash": "0xf92cf0c363358bc440f379e8a4ea5e3ca3d5b0ca5046d5f31ed51dd49f2dfa48",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 20165253,
        "transactionHash": "0xf92cf0c363358bc440f379e8a4ea5e3ca3d5b0ca5046d5f31ed51dd49f2dfa48",
        "address": "0x79b0377Dc32B1efd4C1B12aEFf9Ffc9D73291DDf",
        "topics": [
          "0xb35bf4274d4295009f1ec66ed3f579db287889444366c03d3a695539372e8951"
        ],
        "data": "0x00000000000000000000000037cce5c8bd6141cbe8172b277faa65af5cc83c6a",
        "logIndex": 0,
        "blockHash": "0x0133b2851ae133397d20b073e35bbbc6039a7b7359cefc93d5ac9edb6afd86c5"
      }
    ],
    "blockNumber": 20165253,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xcBFB30c1F267914816668d53AcBA7bA7c9806D13",
    "test-subname.vet"
  ],
  "numDeployments": 2,
  "solcInputHash": "100dfa886ee19ebd29c9886c1b91c9fa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ENS\",\"name\":\"ensAddr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_domainName\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"contract PublicResolver\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ens\",\"outputs\":[{\"internalType\":\"contract ENS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"node\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claim(string,address)\":{\"params\":{\"name\":\"The name of the subdomain (foo if you want foo.example.vet)\",\"resolver\":\"The resolver to set on the subdomain.\"}},\"constructor\":{\"params\":{\"_domainName\":\"The subdomain to manage\",\"ensAddr\":\"The address of the ENS registry.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claim(string,address)\":{\"notice\":\"Register a name, or change the owner of an existing registration.\"},\"constructor\":{\"notice\":\"Constructor.\"}},\"notice\":\"A registrar that allocates subdomains to the first person to claim them.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SubdomainClaimer.sol\":\"SubdomainClaimer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SubdomainClaimer.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\n// VNS Interface: https://docs.vet.domains/Developers/Contracts/Registry/\\nimport \\\"./interfaces/ENS.sol\\\";\\n\\n// Resolver Interface: https://docs.vet.domains/Developers/Contracts/Resolver/\\nimport \\\"./interfaces/PublicResolver.sol\\\";\\n\\nimport {StringUtils} from \\\"./ethregistrar/StringUtils.sol\\\";\\nimport \\\"./utils/Namehash.sol\\\";\\n\\n/**\\n * A registrar that allocates subdomains to the first person to claim them.\\n */\\ncontract SubdomainClaimer {\\n    using StringUtils for *;\\n\\n    ENS public immutable ens;\\n    bytes32 public node;\\n    string public domainName;\\n\\n    /**\\n     * Constructor.\\n     * @param ensAddr The address of the ENS registry.\\n     * @param _domainName The subdomain to manage\\n     */\\n    constructor(ENS ensAddr, string memory _domainName) {\\n        ens = ensAddr;\\n        domainName = _domainName;\\n        node = Namehash.namehash(domainName);\\n    }\\n\\n    /**\\n     * Register a name, or change the owner of an existing registration.\\n     * @param name The name of the subdomain (foo if you want foo.example.vet)\\n     * @param resolver The resolver to set on the subdomain.\\n     */\\n    function claim(string memory name, PublicResolver resolver) public {\\n        bytes32 label = keccak256(bytes(name));\\n        bytes32 subnode = keccak256(abi.encodePacked(node, label));\\n\\n        require(!ens.recordExists(subnode), \\\"Subdomain already claimed.\\\");\\n\\n        // Create subdomain by assigning ownership to this contract for management purpose\\n        ens.setSubnodeOwner(node, label, address(this));\\n\\n        // Set the subdomain's resolver\\n        ens.setResolver(subnode, address(resolver));\\n\\n        // Set the address record on the resolver\\n        resolver.setAddr(subnode, msg.sender);\\n\\n        // Set ownership for new subdomain\\n        ens.setSubnodeOwner(node, label, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x099c19f79cbbc7123d65582f32559384151c67c4165022f9a859b6a832ffb057\",\"license\":\"MIT\"},\"contracts/ethregistrar/StringUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nlibrary StringUtils {\\n    /**\\n     * @dev Returns the length of a given string\\n     *\\n     * @param s The string to measure the length of\\n     * @return The length of the input string\\n     */\\n    function strlen(string memory s) internal pure returns (uint256) {\\n        uint256 len;\\n        uint256 i = 0;\\n        uint256 bytelength = bytes(s).length;\\n        for (len = 0; i < bytelength; len++) {\\n            bytes1 b = bytes(s)[i];\\n            if (b < 0x80) {\\n                i += 1;\\n            } else if (b < 0xE0) {\\n                i += 2;\\n            } else if (b < 0xF0) {\\n                i += 3;\\n            } else if (b < 0xF8) {\\n                i += 4;\\n            } else if (b < 0xFC) {\\n                i += 5;\\n            } else {\\n                i += 6;\\n            }\\n        }\\n        return len;\\n    }\\n\\n    /**\\n     * @dev Escapes special characters in a given string\\n     *\\n     * @param str The string to escape\\n     * @return The escaped string\\n     */\\n    function escape(string memory str) internal pure returns (string memory) {\\n        bytes memory strBytes = bytes(str);\\n        uint extraChars = 0;\\n\\n        // count extra space needed for escaping\\n        for (uint i = 0; i < strBytes.length; i++) {\\n            if (_needsEscaping(strBytes[i])) {\\n                extraChars++;\\n            }\\n        }\\n\\n        // allocate buffer with the exact size needed\\n        bytes memory buffer = new bytes(strBytes.length + extraChars);\\n        uint index = 0;\\n\\n        // escape characters\\n        for (uint i = 0; i < strBytes.length; i++) {\\n            if (_needsEscaping(strBytes[i])) {\\n                buffer[index++] = \\\"\\\\\\\\\\\";\\n                buffer[index++] = _getEscapedChar(strBytes[i]);\\n            } else {\\n                buffer[index++] = strBytes[i];\\n            }\\n        }\\n\\n        return string(buffer);\\n    }\\n\\n    // determine if a character needs escaping\\n    function _needsEscaping(bytes1 char) private pure returns (bool) {\\n        return\\n            char == '\\\"' ||\\n            char == \\\"/\\\" ||\\n            char == \\\"\\\\\\\\\\\" ||\\n            char == \\\"\\\\n\\\" ||\\n            char == \\\"\\\\r\\\" ||\\n            char == \\\"\\\\t\\\";\\n    }\\n\\n    // get the escaped character\\n    function _getEscapedChar(bytes1 char) private pure returns (bytes1) {\\n        if (char == \\\"\\\\n\\\") return \\\"n\\\";\\n        if (char == \\\"\\\\r\\\") return \\\"r\\\";\\n        if (char == \\\"\\\\t\\\") return \\\"t\\\";\\n        return char;\\n    }\\n}\",\"keccak256\":\"0xcec757778c6c5a8a4207f6fdc19eeff84a48d825280d77759cf6b44cc98a4576\",\"license\":\"MIT\"},\"contracts/interfaces/ENS.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n \\ninterface ENS {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n \\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n \\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n \\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n \\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n \\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n \\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n \\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) external returns (bytes32);\\n \\n    function setResolver(bytes32 node, address resolver) external;\\n \\n    function setOwner(bytes32 node, address owner) external;\\n \\n    function setTTL(bytes32 node, uint64 ttl) external;\\n \\n    function setApprovalForAll(address operator, bool approved) external;\\n \\n    function owner(bytes32 node) external view returns (address);\\n \\n    function resolver(bytes32 node) external view returns (address);\\n \\n    function ttl(bytes32 node) external view returns (uint64);\\n \\n    function recordExists(bytes32 node) external view returns (bool);\\n \\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n}\",\"keccak256\":\"0x344e10fb2cf863a943e7486260541c4579048da3d82bad4b25af615914b33dde\",\"license\":\"MIT\"},\"contracts/interfaces/PublicResolver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n \\ninterface PublicResolver {\\n \\n    // Logged when the address associated with a name is changed.\\n    event AddrChanged(bytes32 indexed node, address a);\\n \\n    // Logged when a text record is changed.\\n    event TextChanged(bytes32 indexed node, string indexed key, string value);\\n \\n    // Logged when the name associated with an address is changed in reverse resolution.\\n    event NameChanged(bytes32 indexed node, string name);\\n \\n    // Logged when an ABI is changed.\\n    event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\\n \\n    // Logged when a pubkey is changed.\\n    event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\\n \\n    // Logged when a contenthash is changed.\\n    event ContenthashChanged(bytes32 indexed node, bytes contenthash);\\n \\n    // Function to get the address associated with a node.\\n    function addr(bytes32 node) external view returns (address);\\n \\n    // Function to set the address associated with a node.\\n    function setAddr(bytes32 node, address a) external;\\n \\n    // Function to get a text record.\\n    function text(bytes32 node, string calldata key) external view returns (string memory);\\n \\n    // Function to set a text record.\\n    function setText(bytes32 node, string calldata key, string calldata value) external;\\n \\n    // Function to get the name associated with a node in reverse resolution.\\n    function name(bytes32 node) external view returns (string memory);\\n \\n    // Function to set the name associated with a node in reverse resolution.\\n    function setName(bytes32 node, string calldata name) external;\\n \\n    // Function to get an ABI.\\n    function ABI(bytes32 node, uint256 contentType) external view returns (uint256, bytes memory);\\n \\n    // Function to set an ABI.\\n    function setABI(bytes32 node, uint256 contentType, bytes calldata data) external;\\n \\n    // Function to get a pubkey.\\n    function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y);\\n \\n    // Function to set a pubkey.\\n    function setPubkey(bytes32 node, bytes32 x, bytes32 y) external;\\n \\n    // Function to get a contenthash.\\n    function contenthash(bytes32 node) external view returns (bytes memory);\\n \\n    // Function to set a contenthash.\\n    function setContenthash(bytes32 node, bytes calldata hash) external;\\n \\n    // Function to check if a contract implements an interface.\\n    function supportsInterface(bytes4 interfaceID) external pure returns (bool);\\n}\",\"keccak256\":\"0xcb57952ef881fca67f6d74056817207294d1d7bde892adafbe361c5e7981e12e\",\"license\":\"MIT\"},\"contracts/utils/Namehash.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nlibrary Strings {\\n    struct slice {\\n        uint _len;\\n        uint _ptr;\\n    }\\n    \\n    /*\\n     * @dev Returns a slice containing the entire string.\\n     * @param self The string to make a slice from.\\n     * @return A newly allocated slice containing the entire string.\\n     */\\n    function toSlice(string memory self) internal pure returns (slice memory) {\\n        uint ptr;\\n        assembly {\\n            ptr := add(self, 0x20)\\n        }\\n        return slice(bytes(self).length, ptr);\\n    }\\n\\n    /*\\n     * @dev Returns the keccak-256 hash of the slice.\\n     * @param self The slice to hash.\\n     * @return The hash of the slice.\\n     */\\n    function keccak(slice memory self) internal pure returns (bytes32 ret) {\\n        assembly {\\n            ret := keccak256(mload(add(self, 32)), mload(self))\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns true if the slice is empty (has a length of 0).\\n     * @param self The slice to operate on.\\n     * @return True if the slice is empty, False otherwise.\\n     */\\n    function empty(slice memory self) internal pure returns (bool) {\\n        return self._len == 0;\\n    }\\n    \\n    // Returns the memory address of the first byte after the last occurrence of\\n    // `needle` in `self`, or the address of `self` if not found.\\n    function rfindPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private pure returns (uint) {\\n        uint ptr;\\n\\n        if (needlelen <= selflen) {\\n            if (needlelen <= 32) {\\n                bytes32 mask = bytes32(~(2 ** (8 * (32 - needlelen)) - 1));\\n\\n                bytes32 needledata;\\n                assembly { needledata := and(mload(needleptr), mask) }\\n\\n                ptr = selfptr + selflen - needlelen;\\n                bytes32 ptrdata;\\n                assembly { ptrdata := and(mload(ptr), mask) }\\n\\n                while (ptrdata != needledata) {\\n                    if (ptr <= selfptr)\\n                        return selfptr;\\n                    ptr--;\\n                    assembly { ptrdata := and(mload(ptr), mask) }\\n                }\\n                return ptr + needlelen;\\n            } else {\\n                // For long needles, use hashing\\n                bytes32 hash;\\n                assembly { hash := keccak256(needleptr, needlelen) }\\n                ptr = selfptr + (selflen - needlelen);\\n                while (ptr >= selfptr) {\\n                    bytes32 testHash;\\n                    assembly { testHash := keccak256(ptr, needlelen) }\\n                    if (hash == testHash)\\n                        return ptr + needlelen;\\n                    ptr -= 1;\\n                }\\n            }\\n        }\\n        return selfptr;\\n    }\\n    \\n    /*\\n     * @dev Splits the slice, setting `self` to everything before the last\\n     *      occurrence of `needle`, and `token` to everything after it. If\\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\\n     *      and `token` is set to the entirety of `self`.\\n     * @param self The slice to split.\\n     * @param needle The text to search for in `self`.\\n     * @param token An output parameter to which the first token is written.\\n     * @return `token`.\\n     */\\n    function rsplit(slice memory self, slice memory needle, slice memory token) internal pure returns (slice memory) {\\n        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);\\n        token._ptr = ptr;\\n        token._len = self._len - (ptr - self._ptr);\\n        if (ptr == self._ptr) {\\n            // Not found\\n            self._len = 0;\\n        } else {\\n            self._len -= token._len + needle._len;\\n        }\\n        return token;\\n    }\\n}\\n\\nlibrary Namehash {\\n    using Strings for *;\\n    \\n    function namehash(string memory name) pure internal returns(bytes32 hash) {\\n        hash = bytes32(0);\\n        Strings.slice memory nameslice = name.toSlice();\\n        Strings.slice memory delim = \\\".\\\".toSlice();\\n        Strings.slice memory token;\\n        for(nameslice.rsplit(delim, token); !token.empty(); nameslice.rsplit(delim, token)) {\\n            hash = keccak256(abi.encodePacked(hash, token.keccak()));\\n        }\\n        return hash;\\n    }\\n}\",\"keccak256\":\"0x3a0f751cdd98d73228751115ae44643ccaa125d1960a9f378d55ec0e02fd3bee\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162001876380380620018768339818101604052810190620000379190620006bb565b8173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505080600190816200007c91906200096c565b50620001206001805462000090906200075b565b80601f0160208091040260200160405190810160405280929190818152602001828054620000be906200075b565b80156200010f5780601f10620000e3576101008083540402835291602001916200010f565b820191906000526020600020905b815481529060010190602001808311620000f157829003601f168201915b50505050506200012e60201b60201c565b600081905550505062000d75565b60008060001b9050600062000149836200023160201b60201c565b90506000620001936040518060400160405280600181526020017f2e000000000000000000000000000000000000000000000000000000000000008152506200023160201b60201c565b90506200019f62000495565b620001b68282856200026160201b9092919060201c565b505b620001c9816200032260201b60201c565b620002295783620001e0826200033260201b60201c565b604051602001620001f392919062000a82565b604051602081830303815290604052805190602001209350620002228282856200026160201b9092919060201c565b50620001b8565b505050919050565b6200023b62000495565b600060208301905060405180604001604052808451815260200182815250915050919050565b6200026b62000495565b60006200029185600001518660200151866000015187602001516200034360201b60201c565b905080836020018181525050846020015181620002af919062000ae1565b8560000151620002c0919062000ae1565b83600001818152505084602001518103620002e657600085600001818152505062000317565b83600001518360000151620002fc919062000b1c565b856000018181516200030f919062000ae1565b915081815250505b829150509392505050565b6000808260000151149050919050565b600081516020830151209050919050565b6000808584116200048857602084116200041957600060018560206200036a919062000ae1565b600862000378919062000b57565b600262000386919062000cf6565b62000392919062000ae1565b1960001b90506000818551169050858888620003af919062000b1c565b620003bb919062000ae1565b925060008284511690505b818114620003ff57878411620003e357879450505050506200048d565b8380620003f09062000d47565b945050828451169050620003c6565b86846200040d919062000b1c565b9450505050506200048d565b6000848420905084876200042e919062000ae1565b866200043b919062000b1c565b91505b8582106200048657600085832090508082036200046e57858362000463919062000b1c565b93505050506200048d565b6001836200047d919062000ae1565b9250506200043e565b505b849150505b949350505050565b604051806040016040528060008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620004f082620004c3565b9050919050565b60006200050482620004e3565b9050919050565b6200051681620004f7565b81146200052257600080fd5b50565b60008151905062000536816200050b565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620005918262000546565b810181811067ffffffffffffffff82111715620005b357620005b262000557565b5b80604052505050565b6000620005c8620004af565b9050620005d6828262000586565b919050565b600067ffffffffffffffff821115620005f957620005f862000557565b5b620006048262000546565b9050602081019050919050565b60005b838110156200063157808201518184015260208101905062000614565b60008484015250505050565b6000620006546200064e84620005db565b620005bc565b90508281526020810184848401111562000673576200067262000541565b5b6200068084828562000611565b509392505050565b600082601f830112620006a0576200069f6200053c565b5b8151620006b28482602086016200063d565b91505092915050565b60008060408385031215620006d557620006d4620004b9565b5b6000620006e58582860162000525565b925050602083015167ffffffffffffffff811115620007095762000708620004be565b5b620007178582860162000688565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200077457607f821691505b6020821081036200078a57620007896200072c565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620007f47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620007b5565b620008008683620007b5565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006200084d62000847620008418462000818565b62000822565b62000818565b9050919050565b6000819050919050565b62000869836200082c565b62000881620008788262000854565b848454620007c2565b825550505050565b600090565b6200089862000889565b620008a58184846200085e565b505050565b5b81811015620008cd57620008c16000826200088e565b600181019050620008ab565b5050565b601f8211156200091c57620008e68162000790565b620008f184620007a5565b8101602085101562000901578190505b620009196200091085620007a5565b830182620008aa565b50505b505050565b600082821c905092915050565b6000620009416000198460080262000921565b1980831691505092915050565b60006200095c83836200092e565b9150826002028217905092915050565b620009778262000721565b67ffffffffffffffff81111562000993576200099262000557565b5b6200099f82546200075b565b620009ac828285620008d1565b600060209050601f831160018114620009e45760008415620009cf578287015190505b620009db85826200094e565b86555062000a4b565b601f198416620009f48662000790565b60005b8281101562000a1e57848901518255600182019150602085019450602081019050620009f7565b8683101562000a3e578489015162000a3a601f8916826200092e565b8355505b6001600288020188555050505b505050505050565b6000819050919050565b6000819050919050565b62000a7c62000a768262000a53565b62000a5d565b82525050565b600062000a90828562000a67565b60208201915062000aa2828462000a67565b6020820191508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062000aee8262000818565b915062000afb8362000818565b925082820390508181111562000b165762000b1562000ab2565b5b92915050565b600062000b298262000818565b915062000b368362000818565b925082820190508082111562000b515762000b5062000ab2565b5b92915050565b600062000b648262000818565b915062000b718362000818565b925082820262000b818162000818565b9150828204841483151762000b9b5762000b9a62000ab2565b5b5092915050565b60008160011c9050919050565b6000808291508390505b600185111562000c015780860481111562000bd95762000bd862000ab2565b5b600185161562000be95780820291505b808102905062000bf98562000ba2565b945062000bb9565b94509492505050565b60008262000c1c576001905062000cef565b8162000c2c576000905062000cef565b816001811462000c45576002811462000c505762000c86565b600191505062000cef565b60ff84111562000c655762000c6462000ab2565b5b8360020a91508482111562000c7f5762000c7e62000ab2565b5b5062000cef565b5060208310610133831016604e8410600b841016171562000cc05782820a90508381111562000cba5762000cb962000ab2565b5b62000cef565b62000ccf848484600162000baf565b9250905081840481111562000ce95762000ce862000ab2565b5b81810290505b9392505050565b600062000d038262000818565b915062000d108362000818565b925062000d3f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848462000c0a565b905092915050565b600062000d548262000818565b91506000820362000d6a5762000d6962000ab2565b5b600182039050919050565b608051610aca62000dac6000396000818160c90152818161012701528181610201015281816102a4015261039e0152610aca6000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80633f15457f1461005157806360a1da831461006f578063895d73861461008b578063d70754ec146100a9575b600080fd5b6100596100c7565b6040516100669190610558565b60405180910390f35b6100896004803603810190610084919061071d565b6100eb565b005b610093610445565b6040516100a091906107f8565b60405180910390f35b6100b16104d3565b6040516100be9190610833565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b600082805190602001209050600080548260405160200161010d92919061086f565b6040516020818303038152906040528051906020012090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f79fe538826040518263ffffffff1660e01b815260040161017e9190610833565b602060405180830381865afa15801561019b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101bf91906108d3565b156101ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f69061094c565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166306ab592360005484306040518463ffffffff1660e01b815260040161025e9392919061097b565b6020604051808303816000875af115801561027d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a191906109de565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631896f70a82856040518363ffffffff1660e01b81526004016102fd929190610a0b565b600060405180830381600087803b15801561031757600080fd5b505af115801561032b573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663d5fa2b0082336040518363ffffffff1660e01b815260040161036a929190610a0b565b600060405180830381600087803b15801561038457600080fd5b505af1158015610398573d6000803e3d6000fd5b505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166306ab592360005484336040518463ffffffff1660e01b81526004016103fb9392919061097b565b6020604051808303816000875af115801561041a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043e91906109de565b5050505050565b6001805461045290610a63565b80601f016020809104026020016040519081016040528092919081815260200182805461047e90610a63565b80156104cb5780601f106104a0576101008083540402835291602001916104cb565b820191906000526020600020905b8154815290600101906020018083116104ae57829003601f168201915b505050505081565b60005481565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061051e610519610514846104d9565b6104f9565b6104d9565b9050919050565b600061053082610503565b9050919050565b600061054282610525565b9050919050565b61055281610537565b82525050565b600060208201905061056d6000830184610549565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6105da82610591565b810181811067ffffffffffffffff821117156105f9576105f86105a2565b5b80604052505050565b600061060c610573565b905061061882826105d1565b919050565b600067ffffffffffffffff821115610638576106376105a2565b5b61064182610591565b9050602081019050919050565b82818337600083830152505050565b600061067061066b8461061d565b610602565b90508281526020810184848401111561068c5761068b61058c565b5b61069784828561064e565b509392505050565b600082601f8301126106b4576106b3610587565b5b81356106c484826020860161065d565b91505092915050565b60006106d8826104d9565b9050919050565b60006106ea826106cd565b9050919050565b6106fa816106df565b811461070557600080fd5b50565b600081359050610717816106f1565b92915050565b600080604083850312156107345761073361057d565b5b600083013567ffffffffffffffff81111561075257610751610582565b5b61075e8582860161069f565b925050602061076f85828601610708565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b838110156107b3578082015181840152602081019050610798565b60008484015250505050565b60006107ca82610779565b6107d48185610784565b93506107e4818560208601610795565b6107ed81610591565b840191505092915050565b6000602082019050818103600083015261081281846107bf565b905092915050565b6000819050919050565b61082d8161081a565b82525050565b60006020820190506108486000830184610824565b92915050565b6000819050919050565b6108696108648261081a565b61084e565b82525050565b600061087b8285610858565b60208201915061088b8284610858565b6020820191508190509392505050565b60008115159050919050565b6108b08161089b565b81146108bb57600080fd5b50565b6000815190506108cd816108a7565b92915050565b6000602082840312156108e9576108e861057d565b5b60006108f7848285016108be565b91505092915050565b7f537562646f6d61696e20616c726561647920636c61696d65642e000000000000600082015250565b6000610936601a83610784565b915061094182610900565b602082019050919050565b6000602082019050818103600083015261096581610929565b9050919050565b610975816106cd565b82525050565b60006060820190506109906000830186610824565b61099d6020830185610824565b6109aa604083018461096c565b949350505050565b6109bb8161081a565b81146109c657600080fd5b50565b6000815190506109d8816109b2565b92915050565b6000602082840312156109f4576109f361057d565b5b6000610a02848285016109c9565b91505092915050565b6000604082019050610a206000830185610824565b610a2d602083018461096c565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610a7b57607f821691505b602082108103610a8e57610a8d610a34565b5b5091905056fea26469706673582212203fbb6791535d706e27aba4be81847715811c459274dd6fd6c7dde14fef9d571f64736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80633f15457f1461005157806360a1da831461006f578063895d73861461008b578063d70754ec146100a9575b600080fd5b6100596100c7565b6040516100669190610558565b60405180910390f35b6100896004803603810190610084919061071d565b6100eb565b005b610093610445565b6040516100a091906107f8565b60405180910390f35b6100b16104d3565b6040516100be9190610833565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b600082805190602001209050600080548260405160200161010d92919061086f565b6040516020818303038152906040528051906020012090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f79fe538826040518263ffffffff1660e01b815260040161017e9190610833565b602060405180830381865afa15801561019b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101bf91906108d3565b156101ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f69061094c565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166306ab592360005484306040518463ffffffff1660e01b815260040161025e9392919061097b565b6020604051808303816000875af115801561027d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a191906109de565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631896f70a82856040518363ffffffff1660e01b81526004016102fd929190610a0b565b600060405180830381600087803b15801561031757600080fd5b505af115801561032b573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663d5fa2b0082336040518363ffffffff1660e01b815260040161036a929190610a0b565b600060405180830381600087803b15801561038457600080fd5b505af1158015610398573d6000803e3d6000fd5b505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166306ab592360005484336040518463ffffffff1660e01b81526004016103fb9392919061097b565b6020604051808303816000875af115801561041a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043e91906109de565b5050505050565b6001805461045290610a63565b80601f016020809104026020016040519081016040528092919081815260200182805461047e90610a63565b80156104cb5780601f106104a0576101008083540402835291602001916104cb565b820191906000526020600020905b8154815290600101906020018083116104ae57829003601f168201915b505050505081565b60005481565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061051e610519610514846104d9565b6104f9565b6104d9565b9050919050565b600061053082610503565b9050919050565b600061054282610525565b9050919050565b61055281610537565b82525050565b600060208201905061056d6000830184610549565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6105da82610591565b810181811067ffffffffffffffff821117156105f9576105f86105a2565b5b80604052505050565b600061060c610573565b905061061882826105d1565b919050565b600067ffffffffffffffff821115610638576106376105a2565b5b61064182610591565b9050602081019050919050565b82818337600083830152505050565b600061067061066b8461061d565b610602565b90508281526020810184848401111561068c5761068b61058c565b5b61069784828561064e565b509392505050565b600082601f8301126106b4576106b3610587565b5b81356106c484826020860161065d565b91505092915050565b60006106d8826104d9565b9050919050565b60006106ea826106cd565b9050919050565b6106fa816106df565b811461070557600080fd5b50565b600081359050610717816106f1565b92915050565b600080604083850312156107345761073361057d565b5b600083013567ffffffffffffffff81111561075257610751610582565b5b61075e8582860161069f565b925050602061076f85828601610708565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b838110156107b3578082015181840152602081019050610798565b60008484015250505050565b60006107ca82610779565b6107d48185610784565b93506107e4818560208601610795565b6107ed81610591565b840191505092915050565b6000602082019050818103600083015261081281846107bf565b905092915050565b6000819050919050565b61082d8161081a565b82525050565b60006020820190506108486000830184610824565b92915050565b6000819050919050565b6108696108648261081a565b61084e565b82525050565b600061087b8285610858565b60208201915061088b8284610858565b6020820191508190509392505050565b60008115159050919050565b6108b08161089b565b81146108bb57600080fd5b50565b6000815190506108cd816108a7565b92915050565b6000602082840312156108e9576108e861057d565b5b60006108f7848285016108be565b91505092915050565b7f537562646f6d61696e20616c726561647920636c61696d65642e000000000000600082015250565b6000610936601a83610784565b915061094182610900565b602082019050919050565b6000602082019050818103600083015261096581610929565b9050919050565b610975816106cd565b82525050565b60006060820190506109906000830186610824565b61099d6020830185610824565b6109aa604083018461096c565b949350505050565b6109bb8161081a565b81146109c657600080fd5b50565b6000815190506109d8816109b2565b92915050565b6000602082840312156109f4576109f361057d565b5b6000610a02848285016109c9565b91505092915050565b6000604082019050610a206000830185610824565b610a2d602083018461096c565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610a7b57607f821691505b602082108103610a8e57610a8d610a34565b5b5091905056fea26469706673582212203fbb6791535d706e27aba4be81847715811c459274dd6fd6c7dde14fef9d571f64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claim(string,address)": {
        "params": {
          "name": "The name of the subdomain (foo if you want foo.example.vet)",
          "resolver": "The resolver to set on the subdomain."
        }
      },
      "constructor": {
        "params": {
          "_domainName": "The subdomain to manage",
          "ensAddr": "The address of the ENS registry."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claim(string,address)": {
        "notice": "Register a name, or change the owner of an existing registration."
      },
      "constructor": {
        "notice": "Constructor."
      }
    },
    "notice": "A registrar that allocates subdomains to the first person to claim them.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14,
        "contract": "contracts/SubdomainClaimer.sol:SubdomainClaimer",
        "label": "node",
        "offset": 0,
        "slot": "0",
        "type": "t_bytes32"
      },
      {
        "astId": 16,
        "contract": "contracts/SubdomainClaimer.sol:SubdomainClaimer",
        "label": "domainName",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}